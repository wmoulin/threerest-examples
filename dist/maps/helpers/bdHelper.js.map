{"version":3,"sources":["helpers/bdHelper.ts"],"names":[],"mappings":";;AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAE/B,6CAAsC;AACtC,2CAAoC;AACpC,2CAAoC;AACpC,4CAAkC;AAElC;IAEE;;;OAGG;IACH;;;;;;OAMG;IAEH;;;OAGG;IACH;;;;;;;OAOG;IAEH;;;OAGG;IACH;;;;;;;OAOG;IAEH;;OAEG;IACH;;;;;;;;;;OAUG;IAEH;;;OAGG;IACH,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,cAAE;QACxB,IAAI,GAAG,GAAgB,EAAE,CAAC;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAChC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE;QACtB,MAAM,CAAC,IAAI,eAAK,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,GAAG,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAC3I,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,YAAY,CAAC,aAAa,EAAE,WAAW,EAAE,SAAS;QACvD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,EAAG,CAAC,GAAG,cAAE,CAAC,aAAa,CAAC,CAAC,MAAM,EAAG,CAAC,EAAE,EACjD,CAAC;YACC,EAAE,CAAC,CAAC,cAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC;gBACnD,MAAM,CAAC,cAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7B,CAAC;QACH,CAAC;IACH,CAAC;IAEH;;;;OAIG;IAED,MAAM,CAAC,aAAa,CAAC,IAAI;QACvB,IAAI,MAAM,GAAiB,EAAE,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,IAAI,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,YAAY,GAAG,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACzD,MAAM,CAAC,IAAI,CAAC,IAAI,eAAK,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACnI,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,IAAI;QACxB,IAAI,MAAM,GAAiB,EAAE,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,IAAI,cAAc,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,YAAY,GAAG,QAAQ,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YACzD,MAAM,CAAC,IAAI,CAAC,IAAI,eAAK,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACrH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,EAAE;QACjB,MAAM,CAAC,cAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,EAAE;QACjB,MAAM,CAAC,cAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,EAAE;QAClB,MAAM,CAAC,cAAE,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,YAAY;QACjB,IAAI,GAAG,GAAgB,EAAE,CAAC;QAC1B,IAAI,GAAG,GAAG,cAAE,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7B,IAAI,YAAY,GAAG,cAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,KAAK,GAAG,IAAI,eAAK,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,EAAE,YAAY,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAChI,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,GAAG,GAAG,GAAG,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC;YACpI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED,MAAM,CAAC,aAAa;QAClB,IAAI,GAAG,GAAiB,EAAE,CAAC;QAC3B,IAAI,GAAG,GAAG,cAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;QAC/B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7B,IAAI,aAAa,GAAG,cAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,MAAM,GAAG,IAAI,gBAAM,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,YAAY,CAAC,EAAE,aAAa,CAAC,WAAW,CAAC,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/H,sIAAsI;YACtI,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnB,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;CAEF;AAtJD,2BAsJC","file":"helpers/bdHelper.js","sourcesContent":["let assert = require(\"assert\");\n\nimport Author from \"../models/author\";\nimport Serie from \"../models/serie\";\nimport Title from \"../models/title\";\nimport { DB } from \"../app-const\";\n\nexport default class BdHelper {\n\n  /*\n   * Traitement de l'ensemble des données pour transformer les entrées\n   * auteur de la base de donnée en suite d'objet Author\n   */\n  /*static getAuthors() {\n    let arr:Array<Author> = [];\n    for (var i = 0; i < DB[\"authors\"].length; i++) {\n        arr.push(BdHelper.getAuthor(DB[\"authors\"][i], i + 1));\n    }\n    return arr;\n  }*/\n\n  /*\n   * A partir des données d'un auteur, on crée un objet Author.\n   * Chaque objet Serie est crée et ajouté à l'Author.\n   */\n  /*static getAuthor(json, id) {\n    let series:Array<Serie> = [];\n    for (var i=0 ; i < json[\"series\"].length ; i++)\n    {\n      series.push(BdHelper.getSerie(json[\"series\"][i].id));\n    }\n    return new Author(id, json[\"first_name\"], json[\"last_name\"], series);\n  }*/\n\n  /*\n   * Traitement de l'ensemble des données pour transformer les entrées\n   * series de la base de donnée en suite d'objet Serie\n   */\n  /*static getSeries(short = true) {\n    let arr:Array<Serie> = [];\n    let len = DB[\"series\"].length;\n    for (var i = 0; i < len; i++) {\n        arr.push(BdHelper.getSerie(DB[\"series\"][i].id, short));\n    }\n    return arr;\n  }*/\n\n  /*\n   * A partir des données d'une série, on crée un objet Serie.\n   */\n  /*static getSerie(id, short = true) {\n    let json = DB['series'][id];\n    if (short) {\n      return new Serie(json[\"id\"], json[\"name\"], json['number_of_tome'], json['current_series']);\n    } else {\n      let serie = new Serie(json[\"id\"], json[\"name\"], json['number_of_tome'], json['current_series']);\n      serie.titles = this.getTitles(json);\n      return serie;\n    }\n    \n  }*/\n\n  /*\n   * Traitement de l'ensemble des données pour transformer les entrées\n   * titres de la base de donnée en suite d'objet Titre\n   */\n  static getTitles(json = DB) {\n    let arr:Array<Title> = [];\n    let len = json[\"titles\"].length;\n    for (var i = 0; i < len; i++) {\n        arr.push(BdHelper.getTitle(json[\"titles\"][i], i));\n    }\n    return arr;\n  }\n\n  /*\n   * A partir des données d'un titre, on crée un objet Title.\n   */\n  static getTitle(json, id) {\n    return new Title(id, json[\"name\"], BdHelper.findAuthor(json[\"author\"]).first_name + \" \" + BdHelper.findAuthor(json[\"author\"]).last_name);\n  }\n\n  /*\n   * Renvoie l'objet json correspondant à la catégorie, au critère voulue\n   */\n  static searchParams(categoryField, searchField, searchVal) {\n    for (let i=0 ; i < DB[categoryField].length ; i++)\n    {\n      if (DB[categoryField][i][searchField] == searchVal) {\n        return DB[categoryField][i]\n      }\n    }\n  }\n\n/*****************************************\n * \n * \n * \n */\n\n  static getShortSerie(json) {\n    let series: Array<Serie> = [];\n    for (var i = 0; i < json.length; i++) {\n      let currentIdSerie = json[i];\n      let currentSerie = BdHelper.findSerie(currentIdSerie.id);\n      series.push(new Serie(currentSerie[\"id\"], currentSerie[\"name\"], currentSerie['number_of_tome'], currentSerie['current_series']));\n    }\n    return series;\n  }\n\n  static getShortTitles(json) {\n    let titles: Array<Title> = [];\n    for (var i = 0; i < json.length; i++) {\n      let currentIdTitle = json[i];\n      let currentTitle = BdHelper.findTitle(currentIdTitle.id);\n      titles.push(new Title(currentTitle[\"id\"], currentTitle[\"name\"], BdHelper.findAuthor(currentTitle['author']).name));\n    }\n    return titles;\n  }\n\n  static findSerie(id) {\n    return DB['series'].find(x => x.id === id);\n  }\n\n  static findTitle(id) {\n    return DB['titles'].find(x => x.id === id);\n  }\n\n  static findAuthor(id) {\n    return DB['authors'].find(x => x.id === id);\n  }\n\n  static getAllSeries() {\n    let arr:Array<Serie> = [];\n    let len = DB[\"series\"].length;\n    for (var i = 0; i < len; i++) {\n      let currentSerie = DB[\"series\"][i];\n      let serie = new Serie(currentSerie[\"id\"], currentSerie[\"name\"], currentSerie['number_of_tome'], currentSerie['current_series']);\n      serie.author = BdHelper.findAuthor(currentSerie['author']).first_name + \" \" + BdHelper.findAuthor(currentSerie['author']).last_name;\n      arr.push(serie);\n    }\n    return arr;\n  }\n\n  static getAllAuthors() {\n    let arr:Array<Author> = [];\n    let len = DB[\"authors\"].length;\n    for (var i = 0; i < len; i++) {\n      let currentAuthor = DB[\"authors\"][i];\n      let author = new Author(currentAuthor[\"id\"], currentAuthor[\"first_name\"], currentAuthor['last_name'], currentAuthor['series']);\n      //serie.author = BdHelper.findAuthor(currentSerie['author']).first_name + \" \" + BdHelper.findAuthor(currentSerie['author']).last_name;\n      author.series = BdHelper.getShortSerie(currentAuthor['series']);\n      arr.push(author);\n    }\n    return arr;\n  }\n\n}\n"],"sourceRoot":"../../src/ts"}